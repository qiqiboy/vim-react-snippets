global !p
def capscore(t):
	return '_'.join([ w.upper() for w in re.findall('[A-Z]+[a-z]*', t) ])

def lowerdash(t):
	return '-'.join([ w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t) ])
endglobal

# Normal javascript snippets
#
snippet imp "import package that converts from camelCase or PascalCase to kebab-cased" b
import $1 from '$2`!p snip.rv=lowerdash(t[1])`';
endsnippet

snippet irf "import react-formutil" b
import { withForm } from 'react-formutil';
endsnippet

snippet irfa "import react-antd-formutil" b
import { withForm, FormItem } from 'react-antd-formutil';
endsnippet

snippet irfb "import react-bootstrap-formutil" b
import { withForm, FormGroup } from 'react-bootstrap-formutil';
endsnippet

snippet impf "import File from './File'" b
import $1 from '${2:./}${3:$1}';
endsnippet

snippet impn "import { nested } from" b
import { $1 } from '$2';
endsnippet

snippet impp "import file without a declaration" b
import '$1';
endsnippet

snippet rc "require package that converts from camelCase or PascalCase to kebab-cased" b
const $1 = require('$2`!p snip.rv=lowerdash(t[1])`');
endsnippet

snippet icn "import classnames as cn" b
import cn from 'classnames';
endsnippet

snippet ise "import shallowEqual" b
import shallowEqual from 'shallowequal';
endsnippet

snippet expf "export File from './File'" b
export $1 from '${2:./}$1';
endsnippet

snippet expn "export nested" b
export { $1 } from '$2';
endsnippet

snippet expa "export * from" b
export * from '$1';
endsnippet

snippet cl "console.log"
console.log($1);
endsnippet

snippet clv "console.log variable"
console.log('$1:', $1);
endsnippet

snippet desc "describe a test" b
describe('$1', () => {
	it('should $2', () => {
		$3
	});
});
endsnippet

snippet it "create a test block" b
it('should $1', () => {
	$2
});
endsnippet

# ==========================================
# React Snippets
#
snippet rcc "react class exported" b
import React, { Component } from 'react';

class ${1:`!v expand('%:t:r')`} extends Component {
	state = {};

	render() {
		return <div className="`!p snip.rv=lowerdash(t[1])`$2">
			$3
		</div>
	}
}

export default $1;
endsnippet

snippet sfc "stateless functional component" b
import React from 'react';

const ${1:`!v expand('%:t:r')`} = props => {
	return <div className="`!p snip.rv=lowerdash(t[1])`$2">
			$3
		</div>
};

export default $1;
endsnippet

# react functional component with hooks
snippet hfc "stateless functional component (with hooks)" b
import React, { useState } from "react";

const ${1:`!v expand('%:t:r')`} = props => {
	const [state, setState] = useState(null);

	return <div className="`!p snip.rv=lowerdash(t[1])`$2">
			$3
		</div>
};

export default $1;
endsnippet

snippet sfcnp "stateless functional component" b
import React from 'react';

const ${1:`!v expand('%:t:r')`} = () => {
	return null;$0
};

export default $1;
endsnippet

snippet rcf "react class function" b
$1 = (${2:e}) => {
	$3
};
endsnippet

# ==========================================
# Component Specs and Lifecycle Section
#
snippet sdp "static default props" b
static defaultProps = {
	$1
};
endsnippet

snippet cdp "component default props" b
${1:`!v expand('%:t:r')`}.defaultProps = {
	$2
};
endsnippet

snippet spt "static prop types" b
static propTypes = {
	${1:className}: ${2:PropTypes.string},$0
};
endsnippet

snippet cpt "component prop types" b
${1:`!v expand('%:t:r')`}.propTypes = {
	${2:className}: ${3:PropTypes.string},$0
};
endsnippet

snippet gds "get derived state from props" b
static getDerivedStateFromProps(nextProps, prevState) {
	return null;$0
}
endsnippet

snippet cdm "component did mount" b
componentDidMount() {
	$1
}
endsnippet

snippet scu "should component update" b
shouldComponentUpdate(nextProps, nextState) {
	return $1;
}
endsnippet

snippet gsbu "get snapshot before update" b
getSnapshotBeforeUpdate(prevProps, prevState) {
	return null;$0
}
endsnippet

snippet cdu "component did update" b
componentDidUpdate(prevProps, prevState, ${1:snapshot}) {
	$0
}
endsnippet

snippet cdc "component did catch" b
componentDidCatch(error, info) {
	$0
}
endsnippet

snippet cwum "component will unmount" b
componentWillUnmount() {
	$1
}
endsnippet

# ==========================================
# Deprecated Lifecycle Section
#
snippet cwm "component will mount" b
componentWillMount() {
	$1
}
endsnippet

snippet cwrp "component will receive props" b
componentWillReceiveProps(nextProps) {
	$1
}
endsnippet

snippet cwu "component will update" b
componentWillUpdate(nextProps, nextState) {
	$3
}
endsnippet


# ==========================================
# Prop Types Section
#

# Inline prop types
snippet pta "PropTypes.array" w
PropTypes.array
endsnippet

snippet ptar "PropTypes.array.isRequired" w
PropTypes.array.isRequired
endsnippet

snippet ptb "PropTypes.bool" w
PropTypes.bool
endsnippet

snippet ptbr "PropTypes.bool.isRequired" w
PropTypes.bool.isRequired
endsnippet

snippet ptf "PropTypes.func" w
PropTypes.func
endsnippet

snippet ptfr "PropTypes.func.isRequired" w
PropTypes.func.isRequired
endsnippet

snippet ptnu "PropTypes.number" w
PropTypes.number
endsnippet

snippet ptnur "PropTypes.number.isRequired" w
PropTypes.number.isRequired
endsnippet

snippet pto "PropTypes.object" w
PropTypes.object
endsnippet

snippet ptor "PropTypes.object.isRequired" w
PropTypes.object.isRequired
endsnippet

snippet pts "PropTyes.string" w
PropTypes.string
endsnippet

snippet ptsr "PropTyes.string.isRequired" w
PropTypes.string.isRequired
endsnippet

snippet ptno "PropTypes.node" w
PropTypes.node
endsnippet

snippet ptnor "PropTypes.node.isRequired" w
PropTypes.node.isRequired
endsnippet

snippet pte "PropTypes.element" w
PropTypes.element
endsnippet

snippet pter "PropTypes.element.isRequired" w
PropTypes.element.isRequired
endsnippet

snippet ptao "PropTypes.arrayOf()" w
PropTypes.arrayOf(${1:PropTypes.string})
endsnippet

snippet ptaor "PropTypes.arrayOf().isRequired" w
PropTypes.arrayOf(${1:PropTypes.string}).isRequired
endsnippet

snippet ptio "PropTypes.instanceOf()" w
PropTypes.instanceOf(${1:PropTypes.string})
endsnippet

snippet ptior "PropTypes.instanceOf().isRequired" w
PropTypes.instanceOf(${1:PropTypes.string}).isRequired
endsnippet

snippet ptoo "PropTypes.objectOf()" w
PropTypes.objectOf(${1:PropTypes.string})
endsnippet

snippet ptoor "PropTypes.objectOf().isRequired" w
PropTypes.objectOf(${1:PropTypes.string}).isRequired
endsnippet

snippet ptone "PropTypes.oneOf([])" w
PropTypes.oneOf(['$1'$2])
endsnippet

snippet ptoner "PropTypes.oneOf([]).isRequired" w
PropTypes.oneOf(['$1'$2]).isRequired
endsnippet

snippet ptonet "PropTYpes.oneOfType([])" w
PropTypes.oneOfType([
	$1
])
endsnippet

snippet ptonetr "PropTYpes.oneOfType([]).isRequired" w
PropTypes.oneOfType([
	$1
]).isRequired
endsnippet

snippet ptsh "PropTypes.shape" w
PropTypes.shape({
	$1
})
endsnippet

snippet ptshr "PropTypes.shape.isRequired" w
PropTypes.shape({
	$1
}).isRequired
endsnippet
