global !p
def capscore(t):
	return '_'.join([ w.upper() for w in re.findall('[A-Z]+[a-z]*', t) ])

def lowerdash(t):
	return '-'.join([ w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t) ])
endglobal

snippet intf "create interface for file" b
export interface ${1:`!v expand('%:t:r')`}$2 {
}
endsnippet

# ==========================================
# React Snippets
#
snippet rcc "react class exported (with prop and state interfaces)" b
import React, { Component } from "react";

export interface $1Props {
}

export interface $1State {
}

class ${1:`!v expand('%:t:r')`} extends Component<$1Props, $1State> {
	readonly state = {} as $1State;

	public render() {
		return <div className="`!p snip.rv=lowerdash(t[1])`$2">
			$1$0
		</div>
	}
}

export default $1;
endsnippet

# react functional component
snippet sfc "stateless functional component (with prop interace)" b
import React from "react";

export interface $1Props {
}

const ${1:`!v expand('%:t:r')`}: React.SFC<$1Props> = props => {
	return <div className="`!p snip.rv=lowerdash(t[1])`$2">
			$1$0
		</div>
};

export default $1;
endsnippet

# react functional component with hooks
snippet hfc "stateless functional component (with hooks)" b
import React, { useState } from "react";

export interface $1Props {
}

const ${1:`!v expand('%:t:r')`}: React.FC<$1Props> = props => {
	const [state, setState] = useState(null);

	return <div className="`!p snip.rv=lowerdash(t[1])`$2">
			$1$0
		</div>
};

export default $1;
endsnippet

snippet sfcnp "stateless functional component (without prop interface)" b
import React from "react";

const ${1:`!v expand('%:t:r')`} = () => {
	return null;$0
};

export default $1;
endsnippet

snippet rcf "react class function" b
$1 = (${2:event}) => {
	$3
};
endsnippet

snippet idp "interface default props and type with default props" b
export interface ${1:`!v expand('%:t:r')`}DefaultProps {
  $2
}

export type $1WithDefaultProps = $1Props & $1DefaultProps;
endsnippet

# ==========================================
# Component Specs and Lifecycle Section
#
snippet sdp "static default props" b
public static defaultProps: ${1:`!v expand('%:t:r')`}DefaultProps = {
	$2
};
endsnippet

snippet cdp "component default props" b
${1:`!v expand('%:t:r')`}.defaultProps = {
	$2
} as $1DefaultProps;
endsnippet

snippet spt "static prop types" b
public static propTypes = {
	${1:className}: ${2:PropTypes.string},$0
};
endsnippet

snippet cpt "component prop types" b
${1:`!v expand('%:t:r')`}.propTypes = {
	${2:className}: ${3:PropTypes.string},$0
};
endsnippet

snippet gds "get derived state from props" b
public static getDerivedStateFromProps(nextProps: ${1:`!v expand('%:t:r')`}Props, prevState: $1State) {
	return null;$0
};
endsnippet

snippet cdm "component did mount" b
public componentDidMount() {
	$1
}
endsnippet

snippet scu "should component update" b
public shouldComponentUpdate(nextProps: ${1:`!v expand('%:t:r')`}Props, nextState: $1State) {
	return true;$0
}
endsnippet

snippet gsbu "get snapshot before update" b
public getSnapshotBeforeUpdate(prevProps: ${1:`!v expand('%:t:r')`}Props, prevState: $1State) {
	return null;$0
}
endsnippet

snippet cdu "component did update" b
public componentDidUpdate(prevProps: ${1:`!v expand('%:t:r')`}Props, prevState: $1State, ${2:snapshot: any}) {
	$0
}
endsnippet

snippet cdc "component did catch" b
public componentDidCatch(error: Error, info: React.ErroInfo) {
	$1
}
endsnippet

snippet cwum "component will unmount" b
public componentWillUnmount() {
	$1
}
endsnippet
